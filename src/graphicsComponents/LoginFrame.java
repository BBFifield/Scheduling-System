package graphicsComponents;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.TimerTask;
import java.util.Timer;



public class LoginFrame extends JPanel
{
    private JFrame loginFrame;
    private JTextField userNameField;
    private JTextField passwordField;
    private JButton loginButton;

    private int opportunities;
    private Timer timer;
    private TimerTask task;

    /**
     * This constructs a LoginPanel.
     * @param loginFrame - the main JFrame which this JPanel is laid upon.
     */
    public LoginFrame(JFrame loginFrame)
    {
        this.loginFrame = loginFrame;
        setPreferredSize(new Dimension(300,50));
        setLayout(new BorderLayout());
        createComponents();
        opportunities = 0;
    }

    /**
     * A helper method for the LoginPanel constructor to create its components.
     */
    public void createComponents()
    {
        JPanel userNamePanel = new JPanel();
        userNamePanel.setPreferredSize(new Dimension(200,50));
        add(userNamePanel, BorderLayout.NORTH);


        JPanel passwordPanel = new JPanel();
        passwordPanel.setPreferredSize(new Dimension(200,50));
        add(passwordPanel, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setPreferredSize(new Dimension(200, 50));
        add(buttonPanel, BorderLayout.SOUTH);

        userNameField = new JTextField("Enter Username",15);
        passwordField = new JTextField("Enter Password",15);

        loginButton = new JButton("Login");
        ButtonListener loginListener = new ButtonListener();
        loginButton.addActionListener(loginListener);

        userNamePanel.add(userNameField);
        passwordPanel.add(passwordField);
        buttonPanel.add(loginButton);
    }

    /**
     * This method creates an error dialog which closes in 5 seconds.
     */
    public void exitMessage()
    {
        //Creates new timer and a timer task.
        timer = new Timer();
        task = new TimerTask() {
            @Override
            public void run() {
                System.exit(0);
            }
        };

        //Schedules a program exit in 5 seconds.
        int seconds = 5;
        timer.schedule(task, seconds*1000);

        //Creates new JFrame for error message.
        JLabel errorLabel = new JLabel("Exceeded number of attempts. Program will close in 5 seconds.");
        JFrame errorFrame = new JFrame();
        errorFrame.setSize(400,100);
        errorFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        errorFrame.setTitle("Error");
        errorFrame.add(errorLabel);
        errorFrame.setVisible(true);
    }

    /**
     * An inner class which implements the ActionListener interface. This is where most of the work in the program is done.
     */
    class ButtonListener implements ActionListener
    {
        /**
         * This is strictly used for the login button.
         * @param event -  an event that is generated by clicking the login button.
         */
        public void actionPerformed(ActionEvent event)
        {
            //Gets the username and password entered by the user in the text fields.
            String enteredUsername = userNameField.getText();
            String enteredPassword = passwordField.getText();

            //A boolean value that changes to true if login credentials are located on file.
            boolean found = false;
            try
            {
                //Creates a UserValidation object to read the usernames and passwords from the users.txt file.
                UserValidation validation = new UserValidation();
                String validationUserName = validation.getUserName();

                //While the next line in the file isn't null, continue.
                while(validationUserName != null)
                {
                    //If the credentials entered matches a username and password on file, then continue.
                    if(validationUserName.equals(enteredUsername) && validation.getPassword().equals(enteredPassword))
                    {
                        found = true;
                        //Creates a new JFrame for the welcome message.
                        JFrame welcomeFrame = new JFrame();
                        welcomeFrame.setTitle("Welcome");
                        welcomeFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                        welcomeFrame.setSize(250,100);
                        JLabel welcomeLabel = new JLabel("Welcome, thank you for logging in!");
                        welcomeFrame.add(welcomeLabel);
                        welcomeFrame.setVisible(true);
                        break;
                    }
                    //Gets the next username and password in the file.
                    validationUserName = validation.getUserName();
                }
            }
            catch(IOException e)
            {
                e.printStackTrace();
            }

            //If the number of allowed attempts are exceeded then display an error message in the console and stop the program.
            if(++opportunities == 3)
            {
                exitMessage();
            }

            //If the user credentials entered is a match then close the login frame window.
            if(found == true)
            {
                loginFrame.setVisible(false);
            }
        }
    }
}

	

